name: main CI  

on:
  push:
    branches: [master, sub]


jobs:
  secret-scan:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Creating exclude path
        run: |
          mkdir -p configuration
          echo 'app/' > configuration/exclude_path.txt

      - uses: max/secret-scan@master
        with:
          exclude_path: 'configuration/exclude_path.txt'

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      
      - name: Build docker-compose
        run: docker-compose -f docker-compose.yml up --build -d
        
  sca:
    runs-on: ubuntu-latest

    steps:
      - name: Check out master
        uses: actions/checkout@master

      - name: Install python
        uses: actions/setup-python@v1
        with:
          python-version: "3.7"
      
      - run: mkdir -p logs/

      - name: Install safety
        run: 
          pip install safety

      - name: sca analysis - safety
        run:
          safety check -r app/web/requirements.txt > logs/safety-log.txt

      - uses: actions/upload-artifact@v2
        with:
          name: logs
          path: logs/safety-log.txt

#      - name: Install pyraider
#        run: 
#          pip install pyraider

#      - name: sca analysis - pyraider
#        run:
#          safety check -f app/web/requirements.txt > logs/pyraider-log.txt

#      - uses: actions/upload-artifact@v2
#        with:
#          name: logs
#          path: logs/pyraider-log.txt

  sast:
    needs: [build, sca]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - run: 
          mkdir -p logs/
      
      - name: bandit scan for source code
        uses: jpetrucciani/bandit-check@master
        with:
          path: 'app/web/manage.py'
          bandit_flags: '-lll -o logs/bandit.txt'    

      - uses: actions/upload-artifact@v2
        with:
          name: logs
          path: logs/bandit.txt


  container-scan:

    needs: [sast]
    runs-on: ubuntu-latest
 
    steps:
      - name: Run Dockle
        uses: erzz/dockle-action@v1.1.1
        with:
          image: aiqianchee/tic4302-ecommerce
          report-format: json
          report-name: dockle-report
        
      - name: Upload Report
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Dockle Report
          path: dockle-report.json

      - name: Dockle for mariadb
        uses: erzz/dockle-action@v1.1.1
        with:
          image: mariadb:10.4.12
          report-format: json
          report-name: dockle-report-mariadb
      
      - name: Upload Report
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Dockle Report
          path: dockle-report-mariadb.json


  deploy:
    needs: [container-scan]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      #this only can be done after we are granted admin rights to this repo, cannot create secrets in the github actiogns  
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./app/web/
          file: ./app/web/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: aiqianchee/tic4302-ecommerce:latest


#  runServer:
#    runs-on: ubuntu-latest
#    steps:
    
#      - name: Make migrations
#        run: |
#          cd /app/web/
#          python manage.py makemigrations

#      - name: Run migrate
#        run: python manage.py migrate

#      - name: Run server
#        run: python manage.py runserver


  dast:
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
    
      - name: Build Image for testing
        run: docker-compose -f docker-compose.yml up --build -d

      - name: Install dependencies
        run: pip install -r app/web/requirements.txt 
 
      - name: ZAP Scan
        run: |
          mkdir -p logs/
          sudo docker run --net=project -t owasp/zap2docker-stable zap-baseline.py -t http://localhost:8000/ > logs/owasp.log || true

          
      - name: Upload ZAP scan log
        uses: actions/upload-artifact@v3
        with:
              name: zap-scan
              path: logs/owasp.log  
